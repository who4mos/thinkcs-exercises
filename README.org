#+TITLE: How to Think Like a Computer Scientist's exercises

This repository contains resolutions for the exercises of the book [[http://www.openbookproject.net/thinkcs/python/][How to Think Like a Computer Scientist]].

- [[#Chapter-1][Chapter 1]]
- [[#Chapter-2][Chapter 2]]
- [[#Chapter-3][Chapter 3]]
- [[#Chapter-4][Chapter 4]]
- [[#Chapter-5][Chapter 5]]
- [[#Chapter-6][Chapter 6]]
- [[#Chapter-7][Chapter 7]]
  
* Chapter 1

** 1

I went to the supremarket.

Was to i supermarket the.

** 2

#+begin_src sh
  >>> 1 + 2
  3
  >>> 63 + 6
  69
  >>> 42 * 10
  420
#+end_src

** 3

#+begin_src sh
  >>> 2 / 0
  Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  ZeroDivisionError: division by zero
  >>> print)"something(
    File "<stdin>", line 1
      print)"something(
  ^
  SyntaxError: unmatched ')'
#+end_src

** 4

When using the ~print~ function, quotes aren't part of the output, the function takes a string and outputs its characters. When just typing the string, if in a script, nothing would be outputed. Since we're in the interpreter, it returns the result of the expression passed, in this case only a string, so the quotes are included to indicates the text is a string.

#+begin_src sh
  >>> print("hello")
  hello
  >>> "hello"
  'hello'
#+end_src

** 5

If there was a object named ~cheese~ this error wouldn't appear.

#+begin_src sh
  >>> cheese
  Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  NameError: name 'cheese' is not defined
#+end_src

** 6

When you type the expression ~6 + 4 * 9~ in the interpreter it returns ~42~. If you just put the same expression in a file, it will be evaluated but not outputed, to that you'll need to ~print~ it.

* Chapter 2

** 1

#+begin_src python
  a = "All"
  b = "work"
  c = "and"
  d = "no"
  e = "play"
  f = "makes"
  g = "Jack"
  h = "a"
  i = "dull"
  j = "boy"

  print(a + b + c + d + e + f + g + h + i + j)
#+end_src

** 2

#+begin_src python
  6 * (1 - 2)
#+end_src

** 3

The line is ignored

** 4

#+begin_src python
  bruce = 6
#+end_src

** 5

#+begin_src python
  p = 10000
  n = 12
  r = .08
  t = int(input("Years: "))

  a = p * (1 + (r / n )) ** (n * t)

  print(a)
#+end_src

** 6

When trying to get the remainder of 7 / 0 we get a runtime error because the computer (and no one as far as i know) can divide by 0.

** 7

#+begin_src python
  hour = 14
  wait = 51

  alarm_off = hour + (wait % 24)
  print(alarm_off)
#+end_src

** 8

#+begin_src python
  hour = int(input("Time now (hour):"))
  wait = int(input("Alarm wait: "))

  alarm_off = hour + (wait % 24)
  print(alarm_off)
#+end_src

* Chapter 3

** 1

#+begin_src python
  for i in range(100):
      print("We like Python's turtles!")
#+end_src

** 2

- Atrributes
  - color
  - size
  - material
- Methods
  - call
  - surf the web
  - take pictures

** 3

#+begin_src python
  months = ["January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"]

  for month in months:
      print("One of the months of the year is " + month)
#+end_src

** 4

Tess is now heading 45 degrees.

** 5

*** a

#+begin_src python
  for n in xs:
      print(n)
#+end_src

*** b

#+begin_src python
  for n in xs:
      print(n, n ** 2)
#+end_src

*** c

#+begin_src python
  total = 0
  for n in xs:
      total = total + n
      print(total)
#+end_src

*** d

#+begin_src python
  product = 1
  for n in xs:
      product = product * n
      print(product)
#+end_src

** 6

#+begin_src python
  import turtle

  def draw_polygon(t, n, x):
      """ Uses turtle t to draw a polygon with n sides of x units """
      angle = 360 / n

      for i in range(n):
          t.forward(x)
          t.left(angle)

          
  t = turtle.Turtle()
  wn = turtle.Screen()

  # triangle
  draw_polygon(t, 3, 100)
  draw_polygon(t, 4, 100)
  draw_polygon(t, 6, 100)
  draw_polygon(t, 8, 100)


  wn.mainloop()
#+end_src

** 7

#+begin_src python
  import turtle

  def path(t, x, angles):
      """ Uses turtle t to turn angle in angles before walking x units """
      for angle in angles:
          t.left(angle)
          t.forward(x)

  angles = [160, -43, 270, -97, -43, 200, -940, 17, -86]

  pirate = turtle.Turtle()
  wn = turtle.Screen()

  path(pirate, 100, angles)

  wn.mainloop()
#+end_src

** 8

#+begin_src python
  import turtle

  def path(t, x, angles):
      """ Uses turtle t to turn angle in angles before walking x units, returns final angle """
      final = 0
      for angle in angles:
          final = final + angle
          t.left(angle)
          t.forward(x)

      final = final % 360
      
      return final

  angles = [160, -43, 270, -97, -43, 200, -940, 17, -86]

  pirate = turtle.Turtle()
  wn = turtle.Screen()

  print(path(pirate, 100, angles))

  wn.mainloop()
#+end_src

** 9

360 / 18 = 20

** 10

#+begin_src python
  import turtle          # imports turtle module, no output
  wn = turtle.Screen()   # creates a window
  tess = turtle.Turtle() # creates a turtle
  tess.right(90)         # turns down  
  tess.left(3600)        # turns arround 10 times
  tess.right(-90)        # face east again
  tess.speed(10)         # set speed to 10
  tess.left(3600)        # turns arround 10 times, faster
  tess.speed(0)          # set speed to 0
  tess.left(3645)        # turns arround 10 times, and 45 degrees left
  tess.forward(-100)     # go backwards 100 units
#+end_src

** 11

#+begin_src python
  import turtle

  t = turtle.Turtle()
  wn = turtle.Screen()

  lines = 5
  angle = (360 * 2) / 5

  t.speed(1)
  t.left(angle)
  for line in range(lines):
      t.forward(100)
      t.left(angle)

  wn.mainloop()
#+end_src

** 12

#+begin_src python
  import turtle

  t = turtle.Turtle()
  wn = turtle.Screen()
  angle = 360 / 12

  wn.bgcolor("lightgreen")

  t.shape("turtle")
  t.pensize("3")
  t.color("blue")

  t.penup()
  t.stamp()

  for i in range(12):
      t.forward(100)
      t.pendown()
      t.forward(20)
      t.penup()
      t.forward(20)
      t.stamp()
      t.backward(140)
      t.left(angle)

  wn.mainloop()
#+end_src

** 13

~<class 'turtle.Turtle'>~

** 14

A /bale/?

** 15

The collective noun of python is a /bed/? Python isn't a viper nor venomous.

* Chapter 4

A lot of this chapter exercises will use the following functions:

#+begin_src python
  import turtle

  def make_turtle(color, size):
      t = turtle.Turtle()
      t.color(color)
      t.pensize(size)

      return t

  def make_window(color, title):
      wn = turtle.Screen()
      wn.bgcolor(color)

      return wn
#+end_src

** 1

#+begin_src python
  def draw_square(t, x):
      for i in range(4):
          t.forward(x)
          t.left(90)

  wn = make_window("black", "Canvas")
  t  = make_turtle("pink", 3)
  side  = 20

  for i in range(5):
      draw_square(t, side)
      t.penup()
      t.forward(2*x)
      t.pendown()

  wn.mainloop()
#+end_src

** 2

#+begin_src python
  def draw_square(t, x):
      for i in range(4):
          t.forward(x)
          t.left(90)

  def space_to_next(t, spc):
      t.penup()
      for i in range(2):
          t.right(90)
          t.forward(spc)
          t.left(180)
          t.pendown()
          
  wn = make_window("black", "Canvas")
  t  = make_turtle("pink", 3)

  side  = 20
  spc   = 10

  for i in range(side, side*5, side):
      draw_square(t, i)
      space_to_next(t, spc)
#+end_src

** 3

#+begin_src python
  def draw_poly(t, x, sz):
      a = 360 / x

      for i in range(x):
          t.forward(sz)
          t.left(a)


  wn = make_window("black", "Canvas")
  t  = make_turtle("pink", 3)

  draw_poly(t, 8, 50)
#+end_src

** 4

#+begin_src python
  def draw_poly(t, x, sz):
      a = 360 / x

      for i in range(x):
          t.forward(sz)
          t.left(a)


  wn = make_window("black", "Canvas")
  t  = make_turtle("pink", 3)

  x = 20
  for i in range(x):
      draw_poly(t, 4, 50)
      t.left(360/x)

  wn.mainloop()
#+end_src

** 5

#+begin_src python
  def draw_spiral(t, a, x):
      t.right(a)
      for i in range(1, x+1):
          t.forward(i*5)
          t.right(a)
          

  wn    = make_window("lightgreen", "Canvas")
  t     = make_turtle("blue", 3)

  a = 90
  x = 100
  t.speed(10)

  draw_spiral(t, a, x)
  t.penup()
  t.setpos(0,0)
  t.left(a)
  t.forward(x*10)
  t.pendown()
  a = 89
  draw_spiral(t, a, x)


  wn.mainloop()
#+end_src

** 6
#+begin_src python
  def draw_poly(t, x, sz):
      a = 360 / x

      for i in range(x):
          t.forward(sz)
          t.left(a)

  def draw_equitriangle(t, sz):
      draw_poly(t, 3, sz)

          
  wn = make_window("black", "Canvas")
  t  = make_turtle("pink", 3)

  draw_equitriangle(t, 100)

  wn.mainloop()
#+end_src

** 7

#+begin_src python
  def sum_to(n):
      """ Return the sum of all numbers up and including n """
      result = 0
      for i in range(1, n+1):
          result += i

      return result

  print(sum_to(10))
#+end_src

** 8

#+begin_src python
  def area_of_circle(r):
      return 3.14 * r ** 2
#+end_src

** 9

#+begin_src python
  def draw_star(t, sz):
      for i in range(5):
          t.forward(100)
          t.right(144)
          
  wn = make_window("black", "Canvas")
  t  = make_turtle("pink", 3)

  draw_star(t, 100)

  wn.mainloop()
#+end_src

** 10

#+begin_src python
  def star_space(t):
      t.penup()
      t.forward(350)
      t.right(144)
      t.pendown()
      
  def draw_star(t, sz):
      for i in range(5):
          t.forward(100)
          t.right(144)
          
  wn = make_window("black", "Canvas")
  t  = make_turtle("pink", 3)

  for i in range(5):
      draw_star(t, 100)
      star_space(t)

  wn.mainloop()
#+end_src

* Chapter 5

** 1

#+begin_src python
  def daynum_to_str(day):
      if day == 0:
          return "Sunday"
      elif day == 1:
          return "Monday"
      elif day == 2:
          return "Tuesday"
      elif day == 3:
          return "Wednesday"
      elif day == 4:
          return "Thursday"
      elif day == 5:
          return "Friday"
      elif day == 6:
          return "Saturday"
      else:
          return "Invalid day number!"


  for i in range(7):
      print(daynum_to_str(i))
#+end_src

** 2

#+begin_src python
  def daynum_to_str(day):
      if day == 0:
          return "Sunday"
      elif day == 1:
          return "Monday"
      elif day == 2:
          return "Tuesday"
      elif day == 3:
          return "Wednesday"
      elif day == 4:
          return "Thursday"
      elif day == 5:
          return "Friday"
      elif day == 6:
          return "Saturday"
      else:
          return "Invalid day number!"

  def after_wait(start, days):
      return daynum_to_str((start + days) % 7)



  print(after_wait(3, 137))
#+end_src

** 3

*** 3.1

~a <= b~

*** 3.2

~a < b~

*** 3.3

~a < 18 or day != 3~

*** 3.4

~a < 18 or day == 3~

** 4

*** 4.1

~True~

*** 4.2

~False~

*** 4.3

~False~

*** 4.4

~False~

** 5

| p | q | r | (not (p and q)) or r |
|---+---+---+----------------------|
| F | F | F | T                    |
| F | F | T | T                    |
| F | T | F | T                    |
| F | T | T | T                    |
| T | F | F | T                    |
| T | F | T | T                    |
| T | T | F | F                    |
| T | T | T | T                    |

** 6

#+begin_src python
  def mark_to_grade(mark):
      if mark < 40:
          return "F3"
      elif mark >= 40 and mark < 45:
          return "F2"
      elif mark >= 45 and mark < 50:
          return "F1 Supp"
      elif mark >= 50 and mark < 60:
          return "Third"
      elif mark >= 60 and mark < 70:
          return "Second"
      elif mark >= 70 and mark < 75:
          return "Upper Second"
      else:
          return "First"

  xs = [83, 75, 74.9, 70, 69.9, 65, 60, 59.9, 55, 50,
        49.9, 45, 44.9, 40, 39.9, 2, 0]

  for i in xs:
      print(mark_to_grade(i))
#+end_src

** 7

#+begin_src python
  import turtle

  def make_turtle(color, size):
      t = turtle.Turtle()
      t.color(color)
      t.pensize(size)

      return t

  def make_window(color, title):
      wn = turtle.Screen()
      wn.bgcolor(color)

      return wn

  def draw_bar(t, h):

      t.begin_fill()
      t.left(90)
      t.forward(h)
      t.write(h)
      t.right(90)
      t.forward(40)
      t.right(90)
      t.forward(h)
      t.left(90)
      t.end_fill()
      t.penup()
      t.forward(10)
      t.pendown()


  t  = make_turtle("green", 3)
  wn = make_window("black", "Bars")

  draw_bar(t, 42)

  wn.mainloop()
#+end_src

** 8

#+begin_src python
  import turtle

  def make_turtle(color, size):
      t = turtle.Turtle()
      t.color(color)
      t.pensize(size)

      return t

  def make_window(color, title):
      wn = turtle.Screen()
      wn.bgcolor(color)

      return wn

  def draw_bar(t, h):
      if h < 100:
          t.fillcolor("green")
      elif h >= 100 and h < 200:
          t.fillcolor("yellow")
      else:
          t.fillcolor("red")

      
      t.begin_fill()
      t.left(90)
      t.forward(h)
      t.write(h)
      t.right(90)
      t.forward(40)
      t.right(90)
      t.forward(h)
      t.left(90)
      t.end_fill()
      t.penup()
      t.forward(10)
      t.pendown()


  t  = make_turtle("white", 3)
  wn = make_window("black", "Bars")

  for i in range(50, 250, 50):
      draw_bar(t, i)

  wn.mainloop()
#+end_src

** 9

#+begin_src python
  import turtle

  def make_turtle(color, size):
      t = turtle.Turtle()
      t.color(color)
      t.pensize(size)

      return t

  def make_window(color, title):
      wn = turtle.Screen()
      wn.bgcolor(color)

      return wn

  def draw_bar(t, h):
      if h < 100:
          t.fillcolor("green")
      elif h >= 100 and h < 200:
          t.fillcolor("yellow")
      else:
          t.fillcolor("red")

        
      t.begin_fill()
      t.left(90)
      t.forward(h)
      if h < 0:
          t.penup()
          t.backward(20)
          t.write(h)
          t.forward(20)
          t.pendown()
      else:
          t.write(h)
      t.right(90)
      t.forward(40)
      t.right(90)
      t.forward(h)
      t.left(90)
      t.end_fill()
      t.penup()
      t.forward(10)
      t.pendown()


  t  = make_turtle("white", 3)
  wn = make_window("black", "Bars")

  for i in range(-50, 250, 50):
      draw_bar(t, i)
      
  wn.mainloop()
#+end_src

** 10

#+begin_src python
  def find_hypot(a, b):
    return (a**2 + b**2) ** 0.5
#+end_src

** 11

#+begin_src python
  def is_rightangled(a, b, c):
      return (a**2 + b**2) == c**2
#+end_src

** 12

#+begin_src python
  def is_rightangled(a, b, c):
      if a > b and a > c:
          return (b ** 2 + c ** 2) == a ** 2
      elif b > a and b > c:
          return (a ** 2 + c ** 2) == b ** 2
      else:
          return (a**2 + b**2) == c**2
#+end_src

** 13

#+begin_src sh
  1.4142135623730951 2.0000000000000004
  False
#+end_src

* Chapter 6

All of the exercises below should be added to a single file. In that file, you should also add the ~test~ and ~test_suite~ scaffolding functions.

#+begin_src python
  def test(did_pass):
      """ Print the result of a test """
      linenum = sys._getframe(1).f_lineno
      if did_pass:
          msg = "Test at line {0} ok".format(linenum)
      else:
          msg = "Test at line {0} FAILED".format(linenum)

      print(msg)

      
  def test_suite():
      """ Run the suite of tests for code in this module (this file). """
      test(foo(x) == 420)
#+end_src

** 1

#+begin_src python
  def turn_clockwise(point):
      """ Return the next point of the parameter in the clockwise direction """
      if point == 'N':
          return 'E'
      elif point == 'E':
          return 'S'
      elif point == 'S':
          return 'W'
      elif point == 'W':
          return 'N'
#+end_src

** 2

#+begin_src python
  def day_name(dnum):
      """ Return the name of the day passed as int, 0 being Sunday and 6 Saturday """
      if dnum == 0:
          return "Sunday"
      elif dnum == 1:
          return "Monday"
      elif dnum == 2:
          return "Tuesday"
      elif dnum == 3:
          return "Wednesday"
      elif dnum == 4:
          return "Thursday"
      elif dnum == 5:
          return "Friday"
      elif dnum == 6:
          return "Saturday"
#+end_src

** 3

#+begin_src python
  def day_num(dname):
      """ Return the number of the day passed as string, Sunday being 0 and Saturday 6 """
      if dname == "Sunday":
          return 0
      elif dname == "Monday":
          return 1
      elif dname == "Tuesday":
          return 2
      elif dname == "Wednesday":
          return 3
      elif dname == "Thursday":
          return 4
      elif dname == "Friday":
          return 5
      elif dname == "Saturday":
          return 6
#+end_src

** 4

#+begin_src python
  def day_add(dname, delta):
      """ Returns the day name that will be after delta days after day received """
      return day_name(day_num(dname) + (delta % 7))
#+end_src

** 5

#+begin_src python
  def day_add(dname, delta):
      """ Returns the day name that will be after delta days after day received """
      return day_name((day_num(dname) + delta) % 7)
#+end_src

** 6

#+begin_src python
  def days_in_month(month):
      """ Return the number of days in month """
      if month == "January":
          return 31
      elif month == "February":
          return 28
      elif month == "March":
          return 31
      elif month == "April":
          return 30
      elif month == "May":
          return 31
      elif month == "June":
          return 30
      elif month == "July":
          return 31
      elif month == "August":
          return 31
      elif month == "September":
          return 30
      elif month == "October":
          return 31
      elif month == "November":
          return 30
      elif month == "December":
          return 31
#+end_src

** 7

#+begin_src python
  def to_secs(h, m, s):
      """ Return the number of seconds in the time passed in hours, minutes and seconds """
      secs_in_minute = 60
      secs_in_hour   = secs_in_minute * 60
      total_secs     = s + m*secs_in_minute + h * secs_in_hour
      return total_secs  
#+end_src

** 8

#+begin_src python
  def to_secs(h, m, s):
      """ Return the number of seconds in the time passed in hours, minutes and seconds """
      secs_in_minute = 60
      secs_in_hour   = secs_in_minute * 60
      total_secs     = int(s + m*secs_in_minute + h*secs_in_hour)

      return total_secs
#+end_src

** 9

#+begin_src python
  def hours_in(s):
        """ Return the number of whole hours in s seconds """
        secs_in_minute = 60
        secs_in_hour   = secs_in_minute * 60

        return s // secs_in_hour

  def minutes_in(s):
        """ Return the number of whole left over minutes in seconds """
        secs_in_minute = 60
        secs_in_hour   = secs_in_minute * 60
        
        minutes_left = (s % secs_in_hour) // secs_in_minute
        return minutes_left

  def seconds_in(s):
        """ Return the number of left over seconds """
        secs_in_minute = 60
        secs_in_hour   = secs_in_minute * 60

        seconds_left = (s % secs_in_hour) % secs_in_minute

        return seconds_left
#+end_src

** 10

| test                       | passed?                                  |
|----------------------------+------------------------------------------|
| 3 % 4 == 0                 | no, 3 % 4 == 3                           |
| 3 % 4 == 3                 | yes                                      |
| 3 / 4 == 0                 | no, 3 / 4 == 0.75                        |
| 3 // 4 == 0                | yes                                      |
| 3+4 * 2 == 14              | no, 3 + (4*2) would be 14, 3+4 * 2 == 11 |
| 4-2+2 == 0                 | no, 4-2+2 == 4                           |
| len("hello, world!") == 13 | yes                                      |

** 11

#+begin_src python
  def compare(a, b):
      """ Returns 1 if a > b, 0 if a == b and -1 if a < b """
      if a > b:
          return 1
      elif a == b:
          return 0
      else:
          return -1
#+end_src

** 12

#+begin_src python
  def hypotenuse(a, b):
      """ Return the length of hypotenuse of a triangle with sides a, b """
      return (a**2 + b**2) ** 0.5
#+end_src

** 13

#+begin_src python
  def slope(x1, y1, x2, y2):
      """ Return the slope of the line through (x1, y1) and (x2, y2) """
      return (y2 - y1) / (x2 - x1)

  def intercept(x1, y1, x2, y2):
      """ Return the y-intercept of the line though (x1, y1) and (x2, y2) """
      return y1 - slope(x1, y1, x2, y2) * x1
#+end_src

** 14

#+begin_src python
  def is_even(n):
      """ Returns True if n is even, False if odd """
      return n % 2 == 0

  def test_suite():
      """ Run the suite of tests for code in this module (this file). """
      test(is_even(2) == True)
      test(is_even(3) == False)
      test(is_even(69) == False)
      test(is_even(420) == True)
      test(is_even(-15) == False)
      test(is_even(-16) == True)
#+end_src

** 15

#+begin_src python
  def is_odd(n):
      """ Returns True if n is odd, False if even """
      return n % 2 == 1

  def test_suite():
      """ Run the suite of tests for code in this module (this file). """
      test(is_odd(2) == False)
      test(is_odd(3) == True)
      test(is_odd(420) == False)
      test(is_odd(69) == True)
      test(is_odd(-15) == True)
      test(is_odd(-16) == False)
#+end_src

#+begin_src python
  def is_odd(n):
      """ Returns True if n is odd, False if even """
      return not is_even(n)

  def test_suite():
      """ Run the suite of tests for code in this module (this file). """
      test(is_odd(2) == False)
      test(is_odd(3) == True)
      test(is_odd(420) == False)
      test(is_odd(69) == True)
      test(is_odd(-15) == True)
      test(is_odd(-16) == False)
#+end_src

** 16

#+begin_src python
  def is_factor(f, n):
      """ Returns True if f is a factor of n, False otherwise """
      return n % f == 0
#+end_src

** 17

#+begin_src python
  def is_multiple(m, n):
      """ Returns True if m is multiple of n, False otherwise """
      return is_factor(n, m)
#+end_src

** 18

#+begin_src python
  def f2c(t):
      """ Return the temperature given is Fahrenheit in Celsius, rounded """
      return round((t - 32) * 5 / 9)  
#+end_src

** 19

#+begin_src python
  def c2f(t):
      """ Return the temperature given is Celsius in Fahrenheit, rounded """
      return round(((9 / 5) * t) + 32)
#+end_src

* Chapter 7

** 1

#+begin_src python
  def odd_count(xs):
      """ Return the count of odd numbers in a list """
      counter = 0
      for x in xs:
          if x % 2 == 1:
              counter += 1

      return counter
#+end_src

** 2

#+begin_src python
  def even_sum(xs):
      """ Return the sum of even numbers in a list """
      total = 0
      for x in xs:
          if x % 2 == 0:
              total += x

      return total
#+end_src

** 3

#+begin_src python
  def negative_sum(xs):
      """ Return the sum of negative numbers in a list """
      total = 0
      for x in xs:
          if x < 0:
              total += x

      return total
#+end_src

** 4

#+begin_src python
  def five_long(words):
      """ Return the count of five long chars words in a list of words """
      total = 0
      for word in words:
          if len(word) == 5:
              total += 1

      return total
#+end_src

** 5

#+begin_src python
  def sum_first_odds(xs):
      """ Return the sum of the numbers in a list up to, but not including
      the first even number """
      total = 0
      for x in xs:
          if x % 2 == 0:
              return total
          total += x

      return total
#+end_src

** 6

#+begin_src python
  def word_count_until_sam(words):
      """ Return the number of words in a list up to and including the
      first occurrence of the word "sam" """
      counter = 0
      for word in words:
          if type(word) == str:
              counter += 1
              if word == "sam":
                  return counter

      return counter
#+end_src

** 7

#+begin_src python
  def sqrt(n):
      approx = n / 2.0
      while True:
          better = (approx + n/approx) / 2.0
          print(better)
          if abs(approx - better) < 0.00001:
              return better
          approx = better
#+end_src

output:
#+begin_src python
  7.25
  5.349137931034482
  5.011394106532552
  5.000012953048684
  5.000000000016778
  5.0
#+end_src

** 8

#+begin_src python
  def print_multiples(n, high):
      for i in range(1, high+1):
          print(n * i, end="\t")
      print()

  def print_mult_table(high):
      for i in range(1, high+1):
          print_multiples(i, i)

  # The function calls print_multiples in a way that the number x will show x multiples,
  # looking like a pyramid
#+end_src

** 9

#+begin_src python
  def print_triangular_numbers(n):
      """ Print the first n triangular numbers """
      x = 0
      for i in range(1, n+1):
          x += i
          print("{0}\t{1}".format(i, x))
#+end_src

** 10

#+begin_src python
  def is_prime(n):
      """ Returns True if n is prime, False otherwise """
      if n <= 1:
          return False

      factors = 0
      for i in range(1, n//2):
          if n % i == 0:
              factors += 1

      return factors == 1
#+end_src

** 11

#+begin_src python
  import turtle

  def path(t, pairs):
      for (angle, sz) in pairs:
          t.left(angle)
          t.forward(sz)
          
  pirate = turtle.Turtle()
  wn = turtle.Screen()
  data = [(160, 20), (-43, 10), (270, 8), (-43, 12)]

  path(pirate, data)

  wn.mainloop()
#+end_src

** 12

#+begin_src python
  import turtle

  def path(t, pairs):
      for (angle, sz) in pairs:
          t.left(angle)
          t.forward(sz)
          
  t = turtle.Turtle()
  wn = turtle.Screen()
  x = 100
  diag = x*sqrt(2)
  data = [(45, diag/2), (-90, diag/2), (-135, x), (-90, x), (-135, diag/2), (90, diag/2), (135, x), (-135, diag/2), (-90, diag/2), (-45, x)]

  path(t, data)

  wn.mainloop()
#+end_src

** 13

To be able to draw only the beggining and ending nodes must have an odd degree, thus figures 3 and 4 cannot be drawn.

** 14

#+begin_src python
  def num_digits(n):
      """ Return the number of digits of n """
      if n == 0:
          return 1

      counter = 0
      while n != 0:
          counter += 1
          n = int(n / 10)

      return counter  
#+end_src

** 15

#+begin_src python
  def num_even_digits(n):
      """ Return the number of even digits of n """
      if n == 0:
          return 1

      counter = 0
      while n!= 0:
          digit = n % 10
          if digit % 2 == 0:
              counter += 1
              n //= 10

      return counter
#+end_src

** 16

#+begin_src python
  def sum_of_squares(xs):
      """ Return the sum of the squares of the numbers in a list """
      total = 0
      for x in xs:
          total += x ** 2

      return total
#+end_src

** 17

#+begin_src python
  player = draws = cpu = turn = 0

  while True:
      # player starts every 3rd turn
      turn += 1
      if turn % 3 == 0:
          print("I started")
          result = play_once(True)
      else:
          result = play_once(False)

      # print result
      if result == -1:
          player += 1
          print("I win!")
      elif result == 1:
          draws += 1
          print("Game drawn!")
      else:
          cpu +=  1
          print("You won!")

      # print score
      print("Player: {0} | CPU: {1} | Draws: {2}".format(player, cpu, draws))
      # and player winning percentage
      player_percentage = player / turn
      print("Player winning percentage (%): {0}".format(player_percentage))

      # asks if user wants to play again, "no" to quit
      if input("Do you want to play again?\n> ") == "no":
          print("Goodbye")
          break
#+end_src
